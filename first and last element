class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        //basically apply binary search
          vector<int>result;
        int l=0;
        int resultindex=-1;
        int r=nums.size()-1;
        if(l==r){
            //the only element
            if(nums[l]==target){
                 result.push_back(0);
            result.push_back(0);
            }
            else {
                result.push_back(-1);
                  result.push_back(-1);
            }
           
            return result;
        }
        while(l<=r){
            int mid=l+((r-l)/2);     
            if(nums[mid]==target)
            {
                resultindex=mid;
                break;
            }else if(nums[mid]>target){
                // resultindex=99;
                r=mid-1;
                if(r>=0 && nums[mid]==nums[r])
                while(r-1>0 && nums[r]==nums[r-1])
                    r--;
            }else{
                // resultindex*=100;
                 l=mid+1;
                if(l<nums.size() &&nums[mid]==nums[l])
                while(l+1<nums.size() &&nums[l]==nums[l+1])
                    l++;
            }
        }
        // result.push_back(resultindex);
        // return result;
        int resultendindex;
        
        
        resultendindex=resultindex;
        if(resultindex!=-1){
              while(resultindex-1>=0 && nums[resultindex]==nums[resultindex-1])
            resultindex--;
        while(resultendindex+1<nums.size() && nums[resultendindex]==nums[resultendindex+1])
            resultendindex++;
        }
      
      
        result.push_back(resultindex);
        result.push_back(resultendindex);
        return result;
    }
};
